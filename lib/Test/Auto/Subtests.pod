
=encoding utf8

=head1 NAME

Test::Auto::Subtests

=cut

=head1 ABSTRACT

Testing Automation

=cut

=head1 SYNOPSIS

  package main;

  use Test::Auto;
  use Test::Auto::Parser;
  use Test::Auto::Subtests;

  my $test = Test::Auto->new(
    't/Test_Auto_Subtests.t'
  );

  my $parser = Test::Auto::Parser->new(
    source => $test
  );

  my $subtests = Test::Auto::Subtests->new(
    parser => $parser
  );

  # execute dynamic subtests

  # $subtests->standard

=cut

=head1 DESCRIPTION

This package use the L<Test::Auto::Parser> object to execute a set of dynamic
subtests.

=cut

=head1 LIBRARIES

This package uses type constraints from:

L<Data::Object::Library>

=cut

=head1 ATTRIBUTES

This package has the following attributes:

=cut

=head2 parser

  parser(InstanceOf["Test::Auto::Parser"])

This attribute is read-only, accepts C<(InstanceOf["Test::Auto::Parser"])> values, and is required.

=cut

=head1 METHODS

This package implements the following methods:

=cut

=head2 attributes

  attributes() : Any

This method registers and executes a subtest which tests the declared
attributes.

=over 4

=item attributes example #1

  # given: synopsis

  $subtests->attributes;

=back

=cut

=head2 document

  document() : Any

This method registers and executes a subtest which tests the test document
structure.

=over 4

=item document example #1

  # given: synopsis

  $subtests->document;

=back

=cut

=head2 evaluator

  evaluator(Str $context) : Any

This method evaluates (using C<eval>) the context given and returns the result
or raises an exception.

=over 4

=item evaluator example #1

  # given: synopsis

  my $context = '1 + 1';

  $subtests->evaluator($context); # 2

=back

=cut

=head2 example

  example(Num $number, Str $name, Str $type, CodeRef $callback) : Any

This method finds and evaluates (using C<eval>) the documented example and
returns a L<Data::Object::Try> object. The C<try> object can be used to trap
exceptions using the C<catch> method, and/or execute the code and return the
result using the C<result> method.

=over 4

=item example example #1

  # given: synopsis

  $subtests->example(1, 'evaluator', 'method', sub {
    my ($tryable) = @_;

    ok my $result = $tryable->result, 'result ok';
    is $result, 2, 'meta evaluator test ok';

    $result;
  });

=back

=cut

=head2 functions

  functions() : Any

This method registers and executes a subtest which tests the declared
functions.

=over 4

=item functions example #1

  # given: synopsis

  $subtests->functions;

=back

=cut

=head2 inherits

  inherits() : Any

This method registers and executes a subtest which tests the declared
inheritances.

=over 4

=item inherits example #1

  # given: synopsis

  $subtests->inherits;

=back

=cut

=head2 libraries

  libraries() : Any

This method registers and executes a subtest which tests the declared
type libraries.

=over 4

=item libraries example #1

  # given: synopsis

  $subtests->libraries;

=back

=cut

=head2 methods

  methods() : Any

This method registers and executes a subtest which tests the declared
methods.

=over 4

=item methods example #1

  # given: synopsis

  $subtests->methods;

=back

=cut

=head2 package

  package() : Any

This method registers and executes a subtest which tests the declared
package.

=over 4

=item package example #1

  # given: synopsis

  $subtests->package;

=back

=cut

=head2 registry

  registry() : InstanceOf["Type::Registry"]

This method returns a type registry object comprised of the types declare in
the declared type libraries.

=over 4

=item registry example #1

  # given: synopsis

  my $registry = $subtests->registry;

=back

=cut

=head2 routines

  routines() : Any

This method registers and executes a subtest which tests the declared
routines.

=over 4

=item routines example #1

  # given: synopsis

  $subtests->routines;

=back

=cut

=head2 standard

  standard() : InstanceOf["Test::Auto::Subtests"]

This method is shorthand which registers and executes a series of other
standard subtests.

=over 4

=item standard example #1

  # given: synopsis

  # use:
  $subtests->standard;

  # instead of:
  # $self->package;
  # $self->document;
  # $self->libraries;
  # $self->inherits;
  # $self->attributes;
  # $self->methods;
  # $self->routines;
  # $self->functions;

=back

=cut

=head2 synopsis

  synopsis(CodeRef $callback) : Any

This method evaluates (using C<eval>) the documented synopsis and
returns a L<Data::Object::Try> object. The C<try> object can be used to trap
exceptions using the C<catch> method, and/or execute the code and return the
result using the C<result> method.

=over 4

=item synopsis example #1

  # given: synopsis

  $subtests->synopsis(sub {
    my ($tryable) = @_;
    ok my $result = $tryable->result, 'result ok';
    is ref($result), 'Test::Auto::Subtests', 'isa ok';

    $result;
  });

=back

=cut

=head2 tryable

  tryable(Any @arguments) : InstanceOf["Data::Object::Try"]

This method returns a tryable object which can be used to defer code execution
with a try/catch construct.

=over 4

=item tryable example #1

  # given: synopsis

  my $tryable = $subtests->tryable;

  $tryable->call(sub { $_[0] + 1 });

  # $tryable->result(1);
  #> 2

=back

=over 4

=item tryable example #2

  # given: synopsis

  my $tryable = $subtests->tryable(1);

  $tryable->call(sub { $_[0] + $_[1] });

  # $tryable->result(1);
  #> 2

=back

=cut

=head1 AUTHOR

Al Newkirk, C<awncorp@cpan.org>

=head1 LICENSE

Copyright (C) 2011-2019, Al Newkirk, et al.

This is free software; you can redistribute it and/or modify it under the terms
of the The Apache License, Version 2.0, as elucidated in the
L<"license file"|https://github.com/iamalnewkirk/test-auto/blob/master/LICENSE>.

=head1 PROJECT

L<Project|https://github.com/iamalnewkirk/test-auto>

L<Milestones|https://github.com/iamalnewkirk/test-auto/milestones>

L<Issues|https://github.com/iamalnewkirk/test-auto/issues>

=cut
