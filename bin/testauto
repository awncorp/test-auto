#!/usr/bin/env perl

package Test::Auto::Cli;

use Do 'Cli';

use File::Find;
use File::Basename;
use File::Spec::Functions;
use Test::Auto;
use Data::Object::Name;

use File::Path 'make_path';

# VERSION

method usage() {
  my $help = $self->help;

  say $help->join("\n");
}

method main(:$args, :$opts) {
  my @files;

  return $self->fail('usage') if $opts->help;

  my $input = $opts->input || 't';
  my $output = $opts->output || 'lib';
  my $pattern = $opts->pattern || '.*';
  my $template = $opts->template;

  $ENV{TEST_AUTO_TEMPLATE} = $template if $template;

  find fun() { push @files, $File::Find::name if -f && /\.t$/ }, $input;

  @files = sort grep /$pattern/, @files;

  for my $file (@files) {
    my $test = Test::Auto->new($file);
    my $parser = $test->parser;
    my $package = $parser->render('name');
    my $namer = Data::Object::Name->new($package);

    make_path dirname my $podfile = $namer->format(
      'path', catfile($output, '%s.pod')
    );

    my $rendered = $test->document->render;

    open my $fh, '>', $podfile or raise "Can't write POD file: $!";

    print $fh $rendered;

    close $fh;

    say "Created $podfile";
  }

  return $self;
}

run Test::Auto::Cli;

__DATA__

=help

usage: testauto [options]

  -h --help      Display help text.
  -t --template  Filepath for POD template.
  -p --pattern   Pattern to use to filter files.
  -o --output    Directory for .pod files.
  -i --input     Directory for .t files.

=spec

help|h, input|i=s, output|o=s, pattern|p=s, template|t=s

=cut
